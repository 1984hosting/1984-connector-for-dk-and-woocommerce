<?xml version="1.0"?>
<ruleset name="PHP_CodeSniffer">
	<description>PHP_CodeSniffer configuration</description>

	<config
		name="installed_paths"
		value="../../slevomat/coding-standard,../../wp-coding-standards/wpcs,../../phpcsstandards/phpcsutils,../../phpcsstandards/phpcsextra,../../phpcompatibility/php-compatibility/"
	/>

	<arg name="extensions" value="php,js,css"/>

	<rule ref="PHPCompatibility">
	</rule>
	<config name="testVersion" value="8.2-"/>

	<!-- Use WordPress as the basis of our ruleset -->
	<rule ref="WordPress">
		<!--
		We are not limited by WordPress' naming constraints and are using PSR-4
		autoloading, so we'll use that file naming convention.
		-->
		<exclude name="WordPress.Files.FileName" />

		<!--
		As there is only a single class and a single namepsace in each file,
		we'll skip the file comment rule as it is sufficient to document that
		single class.
		-->
		<exclude name="Squiz.Commenting.FileComment.Missing" />

		<!--
		Disable file comment checks as the only file comment is the one in the
		root file, used for WordPress specific metadata.
		-->
		<exclude name="Squiz.Commenting.FileComment" />

		<!--
		Disables a check for JS being loaded from the footer. It is a silly idea
		and heresy.
		-->
		<exclude name="WordPress.WP.EnqueuedResourceParameters.NotInFooter" />

		<!--
		It's the year 2024 and we may not have flying cars, but we can assume
		that every web host has libcurl installed by now. What the WP wrapper
		functions do is falling back on the PHP filesystem functions if curl is
		not found and we don't need such negativity in our lives.
		-->
		<exclude name="WordPress.WP.AlternativeFunctions.curl_curl_init" />
		<exclude name="WordPress.WP.AlternativeFunctions.curl_curl_setopt" />
		<exclude name="WordPress.WP.AlternativeFunctions.curl_curl_exec" />
		<exclude name="WordPress.WP.AlternativeFunctions.curl_curl_getinfo" />
		<exclude name="WordPress.WP.AlternativeFunctions.curl_curl_error" />
		<exclude name="WordPress.WP.AlternativeFunctions.curl_curl_close" />
	</rule>

	<!--
	Disable multiline function call checks for JS files.
	This sniff seems to be buggy as it is insisiting on spaces, instead of tabs.
	-->
	<rule ref="PEAR.Functions.FunctionCallSignature.Indent">
		<exclude-pattern>./js/**</exclude-pattern>
	</rule>

	<!--
	Not escaping outputted strings should be allowed in tests, because why not.
	-->
	<rule ref="WordPress.Security.EscapeOutput.OutputNotEscaped">
		<exclude-pattern>./tests/**</exclude-pattern>
	</rule>

	<!--
	Excluding commenting rules from tests, as we are using TestDox instead
	-->
	<rule ref="Squiz.Commenting.ClassComment.Missing">
		<exclude-pattern>./tests/**</exclude-pattern>
	</rule>
	<rule ref="Squiz.Commenting.FunctionComment.Missing">
		<exclude-pattern>./tests/**</exclude-pattern>
	</rule>

	<rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHint.UselessAnnotation">
		<exclude-pattern>@return void</exclude-pattern>
	</rule>
	<!--
	As we are using the tests/Supress* files for a hack, we can safely define
	multiple classes in there
	-->
	<rule ref="Generic.Files.OneObjectStructurePerFile.MultipleFound">
		<exclude-pattern>./tests/_/Supress*</exclude-pattern>
	</rule>

	<!-- Disable everything from the phpcsextra package -->
	<rule ref="Universal">
		<exclude name="Universal"></exclude>
	</rule>

	<!-- Enforce strict type decleration at top of all PHP files -->
	<rule ref="SlevomatCodingStandard.TypeHints.DeclareStrictTypes">
		<properties>
			<property name="spacesCountAroundEqualsSign" value="1" />
			<property name="linesCountBeforeDeclare" value="1" />
			<property name="linesCountAfterDeclare" value="1" />
		</properties>
	</rule>

	<!-- Enforce type hinting for function parameters -->
	<rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHint">
	</rule>

	<!-- Enforce type hinting for function return values -->
	<rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHint">
	</rule>

	<!-- Disallow "sloppy" equals operators -->
	<rule ref="SlevomatCodingStandard.Operators.DisallowEqualOperators">
	</rule>

	<!--
	As we are aligning the variable name conventions with DK in the Model
	classes, we ignore the WordPress variable names for those.
	-->
	<rule ref="WordPress.NamingConventions.ValidVariableName">
		<exclude-pattern>./src/Model/**</exclude-pattern>
		<exclude-pattern>./src/Service/**</exclude-pattern>
	</rule>

	<!--
	As we are already using strong typing, we don't really need to document the
	type of each class property. This also removes requirements for documenting
	class properties at all.
	-->
	<rule ref="Squiz.Commenting.VariableComment">
		<exclude name="Squiz.Commenting.VariableComment.Missing" />
	</rule>

	<!--
	Exclude the vendor direcotry because of course
	-->
	<exclude-pattern>./vendor/*</exclude-pattern>

	<!--
	As we are rebuilding and moving functionality from the ./App directory and
	over to ./src, we will simply ignore the code in there for the time being.
	-->
	<exclude-pattern>./App/*</exclude-pattern>
</ruleset>
